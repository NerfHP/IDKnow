generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // CHANGE THIS from "sqlite"
  url      = env("DATABASE_URL")
}

// --- Your existing User and Token models are unchanged ---
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]
  reviews   Review[]
}

model Token {
  id          String   @id @default(cuid())
  token       String   @unique
  type        String
  expires     DateTime
  blacklisted Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

// --- Your existing Category model is unchanged ---
model Category {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  type        String
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  parentId    String?
  parent      Category?   @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[]  @relation("ParentChild")
  items       ContentItem[]
}

// --- UPDATED ContentItem model ---
model ContentItem {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  content     String?
  price       Float?
  salePrice   Float?   // This field for sales is already here! Perfect.
  images      String
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categories  Category[]

  vendor          String?
  sku             String?
  availability    String?
  attributes      String?
  specifications  String?
  benefits        String?
  variants        String?
  howToUse        String?
  packageContents String?
  reviews         Review[]

  // --- NEW FEATURES ADDED HERE ---
  
  // **STOCK FEATURE**: 0 means "Out of Stock".
  // When a product is purchased, you will decrease this number.
  stock       Int      @default(0)

  // **VISIBILITY FEATURE**: Allows you to hide products without deleting them.
  isPublished Boolean  @default(true)
}

// --- Your existing FormSubmission model is unchanged ---
model FormSubmission {
  id        String   @id @default(cuid())
  type      String
  data      String // JSON string
  createdAt DateTime @default(now())
}

// --- Your existing Review model is unchanged ---
model Review {
  id        String      @id @default(cuid())
  rating    Int
  comment   String?
  imageUrl  String?
  createdAt DateTime    @default(now())
  
  productId String
  product   ContentItem @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
}

// --- NEW Discount model ---
model Discount {
  id           String    @id @default(cuid())
  
  // **DISCOUNT FEATURE**: The code customers will type in, e.g., "SUMMER20".
  code         String    @unique 
  
  discountType String    // "PERCENTAGE" or "FIXED_AMOUNT"
  value        Float     // The value of the discount (e.g., 20 for 20% or 500 for â‚¹500).
  
  expiresAt    DateTime? // Optional: make the code expire on a certain date.
  isActive     Boolean   @default(true) // Easily turn codes on or off.
  
  createdAt    DateTime  @default(now())
}