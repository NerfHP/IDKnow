openapi: 3.0.0
info:
  title: "Divine Stack API"
  version: "1.0.0"
  description: "API for the Divine Stack e-commerce and services platform."

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'

  /api/auth/login:
    post:
      summary: Login a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'

  /api/auth/refresh-token:
    post:
      summary: Refresh authentication tokens
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'

  /api/content/items:
    get:
      summary: Get all content items (products, services, articles)
      tags: [Content]
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [PRODUCT, SERVICE, ARTICLE]
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A list of content items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentItem'

  /api/content/item/{slug}:
    get:
      summary: Get a single content item by its slug
      tags: [Content]
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested content item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentItem'

  /api/content/categories:
    get:
      summary: Get all categories
      tags: [Content]
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /api/form/contact:
    post:
      summary: Submit a contact form
      tags: [Forms]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactForm'
      responses:
        '200':
          description: Message received successfully

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
    
    UserRegistration:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    
    AuthTokens:
      type: object
      properties:
        access:
          type: object
          properties:
            token:
              type: string
            expires:
              type: string
              format: date-time
        refresh:
          type: object
          properties:
            token:
              type: string
            expires:
              type: string
              format: date-time

    ContentItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        content:
          type: string
        price:
          type: number
        images:
          type: array
          items:
            type: string
        type:
          type: string
          enum: [PRODUCT, SERVICE, ARTICLE]
        category:
          $ref: '#/components/schemas/Category'

    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        type:
          type: string
          enum: [PRODUCT, SERVICE, ARTICLE]

    ContactForm:
      type: object
      required: [name, email, message]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        message:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []